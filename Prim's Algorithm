import java.util.*;

public class PrimsAlgorithm {
    static class Edge {
        int dest, weight;
        Edge(int dest, int weight) {
            this.dest = dest;
            this.weight = weight;
        }
    }

    public static void primMST(List<List<Edge>> adjList, int vertices) {
        boolean[] inMST = new boolean[vertices];
        int[] key = new int[vertices]; // Minimum weight edge to connect
        int[] parent = new int[vertices]; // To store MST

        Arrays.fill(key, Integer.MAX_VALUE);
        Arrays.fill(parent, -1);

        key[0] = 0; // Start from node 0

        for (int count = 0; count < vertices - 1; count++) {
            // Pick the minimum key vertex not yet included
            int u = -1;
            int minKey = Integer.MAX_VALUE;

            for (int v = 0; v < vertices; v++) {
                if (!inMST[v] && key[v] < minKey) {
                    minKey = key[v];
                    u = v;
                }
            }

            inMST[u] = true; // Include vertex in MST

            // Update key and parent for adjacent vertices
            for (Edge edge : adjList.get(u)) {
                int v = edge.dest;
                int weight = edge.weight;
                if (!inMST[v] && weight < key[v]) {
                    key[v] = weight;
                    parent[v] = u;
                }
            }
        }

        // Print MST
        System.out.println("Edge \tWeight");
        for (int i = 1; i < vertices; i++) {
            System.out.println(parent[i] + " - " + i + "\t" + key[i]);
        }
    }

    public static void main(String[] args) {
        int vertices = 5;
        List<List<Edge>> adjList = new ArrayList<>();
        for (int i = 0; i < vertices; i++) {
            adjList.add(new ArrayList<>());
        }

        // Create graph (undirected)
        adjList.get(0).add(new Edge(1, 2));
        adjList.get(0).add(new Edge(3, 6));
        adjList.get(1).add(new Edge(0, 2));
        adjList.get(1).add(new Edge(2, 3));
        adjList.get(1).add(new Edge(3, 8));
        adjList.get(1).add(new Edge(4, 5));
        adjList.get(2).add(new Edge(1, 3));
        adjList.get(2).add(new Edge(4, 7));
        adjList.get(3).add(new Edge(0, 6));
        adjList.get(3).add(new Edge(1, 8));
        adjList.get(4).add(new Edge(1, 5));
        adjList.get(4).add(new Edge(2, 7));

        primMST(adjList, vertices);
    }
}
